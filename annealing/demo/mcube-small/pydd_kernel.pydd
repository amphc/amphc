import numpy as np

def gen_beamforming_Z(pulseDataNoPadding: complex128[:,:], d_matchFilter: complex128[:],
       steerVector1: complex128[:,:1], steerVector11: complex128[:1,:],
       numPulses: int32, numSamples: int32, numChannels: int32,
       fftSize: int32, totalcubes: int32) -> complex128[:,:,:]:

    size = 4*numPulses
    Zs = np.zeros((totalcubes, size, fftSize), dtype=np.complex128)
    for cubeid in range(totalcubes):
        # check = receiver(cubeid, start_time)
        dataCube = np.zeros((numChannels, numSamples), dtype=np.complex128)
        beamforming = np.zeros((numPulses, numSamples), dtype=np.complex128)
        for idx in range(numPulses):
            pulseDataNoPadding1 = np.reshape(pulseDataNoPadding[idx,:], (1,numSamples))
            dataCube = np.multiply(steerVector1, pulseDataNoPadding1, dtype=np.complex128)
            noiseReal = np.random.randn(numChannels, numSamples)
            noiseImag = np.random.randn(numChannels, numSamples)
            noise = (noiseReal + 1j*noiseImag) / np.sqrt(2.0)
            dataCube = dataCube + noise
            beamforming[idx,:] = np.squeeze(np.matmul(steerVector11, dataCube))
        d_X = np.fft.fft(beamforming, fftSize, axis=1)
        d_matchFilter1 = np.reshape(d_matchFilter, (1,fftSize))
        d_matchFilterMultiply = np.tile(d_matchFilter1, (numPulses,1))
        d_Y = d_X * d_matchFilterMultiply
        d_y = np.fft.ifft(d_Y, axis=1)
        d_yNorm = d_y / numSamples
        d_yNorm = np.fft.fftshift(d_yNorm, axes=1)
        d_ZTemp = np.fft.fft(d_yNorm, 4*numPulses, axis=0)
        d_Z = np.fft.fftshift(d_ZTemp, axes=0)
        Zs[cubeid,:,:] = d_Z
    return Zs
